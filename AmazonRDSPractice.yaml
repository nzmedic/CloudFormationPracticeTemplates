AWSTemplateFormatVersion: 2010-09-09
# This CloudFormation template deploys a basic VPC / Network as a precurser to Amazon RDS practice
Parameters:
  AmazonRDSPracticeCidrBlock:    
    Description: enter the CIDR block range to be used by the VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref AmazonRDSPracticeCidrBlock
      EnableDnsSupport: true  #prep for dns and gateway work
      EnableDnsHostnames: true
      InstanceTenancy: default  #vs dedicated
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-RDS" ]]
  InternetGateway: #Each Gateway can be assigned to one and only one VPC and Amazon manages making the Gateway available across availability zones.
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnetAZ1: #RDS DBSubnetGroups require redundant subnets
    Type: AWS::EC2::Subnet
    Properties:    
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24 #even for public, odd for private "private is at odds with public"
      MapPublicIpOnLaunch: true #as the public subnet
      AvailabilityZone: !Select [ 0, !GetAZs ] # get first AZ from list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicSubnet
  PublicSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:    
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicSubnet
  PrivateSubnetAZ1: #RDS DBSubnetGroups require redundant subnets
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false #private subnet
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PrivateSubnet
  PrivateSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false #private subnet
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PrivateSubnet        
  PublicDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet Group for Public Subnets
      DBSubnetGroupName: !Sub ${AWS::StackName}-PublicDBSubnetGroup
      SubnetIds: 
      - !Ref PublicSubnetAZ1
      - !Ref PublicSubnetAZ2
  PrivateDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet Group for Private Subnets
      DBSubnetGroupName: !Sub ${AWS::StackName}-PrivateDBSubnetGroup
      SubnetIds: 
      - !Ref PrivateSubnetAZ1
      - !Ref PrivateSubnetAZ2
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment #According to the AWS documentation, any route entries that specify a gateway must specify a dependency on the gateway attachment resource
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  SubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZ1
  SubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZ2
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "SSH traffic in, all traffic out."
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1 #any protocol
        CidrIp: 0.0.0.0/0
  myDB:  
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AutoMinorVersionUpgrade: true #for dev
      BackupRetentionPeriod: 1
      DBInstanceClass: db.t3.micro #free tier RDS
      DBInstanceIdentifier: !Sub ${AWS::StackName}-Dev
      DBName: !Sub ${AWS::StackName}PGDB  #start with a letter and alphanumeric only
      DBSubnetGroupName: !Ref PublicDBSubnetGroup
      Engine: postgres
      EngineVersion: 13.4 #for supported engine+version combinations see: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#Concepts.DBInstanceClass.Support
      MasterUsername: sa # make toes curl 
      MasterUserPassword: password1 # safe as houses.... 
      PubliclyAccessible: true
      StorageType: standard # standard (magnetic) | gp2 | io1
    DependsOn: VPCGatewayAttachment # required as the DB is part of a public VPC defined in the same template. Presume this so the RDS instance is created after the VPC
      



